=== Developer notes ===

==== Adding a new version of BAI ===

Example: create v3

1. create schema/v3:
  - copy schema/v1 to schema/v3 update constants/types as needed

2. create BAI/v3:
  - copy BAI/v1 to BAI/v3 update all references as needed

3. Add newly added files from 1. and 2. into CMakeLists
4. Add #include "v3/schema.h" in schema/schema.h
5. Add #include "v3/BAI.h" and a "case 3" switch statement in BAI/base.cpp


==== VCMI filesystems ===

VCMI first loads an "initial" filesystem, see CResourceHandler::initialize
The initial filesystem loads only dirs, JSON and H3 archives (LOD, VID, etc.)
(see CFilesystemLoader::listFiles)
Later, another filesystem is constructed based on config/filesystem.json
XXX: the "config/filesystem.json" is looked up in the INITIAL filesystem
     There are multiple "config/filesystem.json" files and the last one
     is used in this case (the one in ~/Library/Application Support/vcmi)
MMAI model is physically located in $VCMI/Mods/mmaimodels/models/agent.pt
The `mmaimodels` mod contains this in the config:

    "filesystem": {
      "MMAI/MODELS/": [
        {"type" : "dir",  "path" : "/models"}
      ],
      "MMAI/CONFIG/": [
        {"type" : "dir",  "path" : "/config"}
      ]
    }

The value of "path" above will not be present in the resource name of VCMI.
i.e. resource name will be key ("MMAI/MODELS")

The real location can be obtained as follows:
     auto rpath = ResourcePath("MMAI/MODELS/defender.pt")
     auto loaders = CResourceHandler::get()->getResourcesWithName(rpath);
     auto fullpath = loaders.at(0)->getResourceName(rpath).value().str();
     // in dev mode this is
     // "./Mods/MMAI/models/defender.pt"


=== libtorch ===
== ios (dev)
1. compile VCMI deps for ios
    // NOTE: for this to work, conanfile must be amended to ensure no
    //       `hwloc` dependency exists, as it cannot be built for mobile os
    //       down-grading to `onetbb/2020.3.3` solves that

    $ conan profile new ios --detect

    // sdl_mixer complains my compiler version is 15, but in config it is 14
    // => edit CI/conan/base/apple:
      -compiler.version=14
      +compiler.version=15

    $ conan install . \
            --install-folder=conan-generated \
            --no-imports \
            --build=missing \
            --profile:build=ios \
            --profile:host=CI/conan/ios-arm64

2. compile libtorch for ios
    $ cd $PROJ
    $ git clone --recursive https://github.com/pytorch/pytorch
    $ cd pytorch
    $ git checkout v2.4.1
    $ git submodule sync
    $ git submodule update --init --recursive
    $ python3.10 -m venv .venv
    $ . .venv/bin/activate.fish
    $ pip install cmake ninja
    $ pip install -r requirements.txt
    $ python3 setup.py develop
    $ BUILD_LITE_INTERPRETER=1 scripts/build_android.sh

3. compile VCMI for ios
    $ cd $VCMI
    $ cmake -B build-ios --preset ios-device-conan \
        -D BUNDLE_IDENTIFIER_PREFIX=com.simo \
        -D CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=LD7K7CF9C5 \
        -D ENABLE_MMAI=1 \
        -D ENABLE_MMAI_STRICT_LOAD=1 \
        -D ENABLE_LIBTORCH=1 \
        -D LIBTORCH_PATH=/Users/simo/Projects/pytorch/build_ios/install

    // XXX: there are MANY warnings like this (xcode bug?):
    //        createItemModels creation requirements should not create capability ...
    // They can be ignored.
    // Build errors usually can be found by text-searching for "error:"

    $ cmake --build build-ios --target vcmiclient

    $ cd build-ios
    $ cpack -C Debug

    // XXX: there are several errors like this:
    //        install_name_tool: no LC_RPATH load command with path ...
    // They can be ignored

4. (optional) test with an iphone device
    4.1. connect iPhone to mac
    4.2. run Sideloadly
    4.3. open Advanced Options and set "Normal install"
          (i.e. without signing it -- it's already signed!)

    // iPhone Crash dumps can be seen in "Analytics Data", search for "vcmi"
    // Also, run "Console" on Mac with connected iPhone via cable,
    // then select it from the left pane -- all logs will be streamed
    //
    // XXX: printf() seems to cause a crash on iOS
    //

== ios (release)

1. same as step 1. for ios (dev), but use `--profile:host=CI/conan/ios-arm64`
2. same as step 2. for ios (dev)
3. compile VCMI for ios (release)
    // XXX: first set "CODE_SIGNING_ALLOWED_FOR_APPS=YES" in CMakePresets.json
    $ cd $VCMI
    $ cmake --preset ios-release-conan-ccache \
        -D BUNDLE_IDENTIFIER_PREFIX=com.simo \
        -D CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM=LD7K7CF9C5 \
        -D ENABLE_MMAI=1 \
        -D ENABLE_MMAI_STRICT_LOAD=1 \
        -D ENABLE_LIBTORCH=1

    $ cmake --build --preset ios-release-conan-ccache
    $ cd out/build/ios-release-conan-ccache
    $ cpack -C Release
    $ cd -
4. same as step 4. for ios (dev)

== iphone simulator

  XXX: does not work -- I couldn't get QT to build for simulator due to
  error: Xcode building for iOS Simulator, but linking in an object file built for iOS
  I did try to separately compile QT for ios simulator, but I eventually gave up

== mac

1. same as step 1. for ios (dev), but use `default` for both profiles
2. compile libtorch for ios

    // same as step 2. for ios (dev) up until `build_ios.sh` line:
    $ BUILD_ROOT="$PWD/build_mac" scripts/build_local.sh \
      -DCMAKE_INSTALL_PREFIX="$PWD/build_mac/install" \
      -DBUILD_LITE_INTERPRETER=ON

    $ cmake -P build_mac/cmake_install.cmake

3. compile VCMI for mac
    $ cd $VCMI
    $ cmake --build build/ -- -j8

    $ cmake -S . -B play -Wno-dev \
          -D CMAKE_TOOLCHAIN_FILE=conan-generated/conan_toolchain.cmake \
          -D CMAKE_BUILD_TYPE=Debug \
          -D CMAKE_EXPORT_COMPILE_COMMANDS=1 \
          -D ENABLE_SINGLE_APP_BUILD=0 \
          -D ENABLE_CCACHE=1 \
          -D ENABLE_NULLKILLER_AI=0 \
          -D ENABLE_LAUNCHER=1 \
          -D ENABLE_LOBBY=1 \
          -D ENABLE_ML=0 \
          -D ENABLE_MMAI=1 \
          -D ENABLE_MMAI_STRICT_LOAD=1 \
          -D ENABLE_LIBTORCH=1 \
          -D LIBTORCH_PATH=/Users/simo/Projects/pytorch/build_mac/install

    $ cmake --build build/

== linux

1.

2. compile libtorch for ios

    // Checks out 30+ git submodules; can take up to 10 min.
    $ git clone --branch v2.4.1 --depth 1 \
      --recurse-submodules --shallow-submodules \
      https://github.com/pytorch/pytorch

    // Apply patch for CUDA on linux
    // https://github.com/NVIDIA/nccl/issues/650#issuecomment-1145173577

    $ python3.10 -m venv .venv
    $ . .venv/bin/activate

    // XXX: i believe this setup.py is redundant
    $ python setup.py develop

    $ export _GLIBCXX_USE_CXX11_ABI=1
    $ BUILD_ROOT="$PWD/build_linux" scripts/build_local.sh \
      -DCMAKE_INSTALL_PREFIX="$PWD/build_linux/install" \
      -DBUILD_LITE_INTERPRETER=ON


== android

1. same as step 1. for ios (dev), but replace `ios` with `android` for both profiles

    $ conan profile new android --detect

    // sdl_mixer complains my compiler version is 15, but in config it is 14
    // => edit CI/conan/base/android:
      -compiler.version=14
      +compiler.version=15

    // Download android-ndk r25c from
    // https://github.com/android/ndk/wiki/Unsupported-Downloads

    $ conan install . \
            --install-folder=conan-generated \
            --no-imports \
            --build=missing \
            --profile:build=android \
            --profile:host=CI/conan/android-64-ndk
